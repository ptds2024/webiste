+++
title = "homework #3 solutions"
date =  2021-11-24
weight = 26
+++



## Problem 1: Finding area of a shape

```{toml}
make_circle = function(col = "darkblue", fill = NULL, lty = 1) {
  phi <- seq(from = pi/2, to = 0, length.out = 201)
  f1_points <- cbind(.5 * cos(phi), .5 * sin(phi))
  
  phi <- seq(from = 0, to = pi, length.out = 101)
  f2_points <- cbind(.5 + .5 * cos(phi), .5 + .5 * sin(phi))
  
  x <- seq(from = .5, to = 1, length.out = 101)
  f3_points <- cbind(x, x - .5)
  
  coords = rbind(f2_points, f1_points, f3_points)
  
  lines(coords, col = col, lty = lty)
  if (!is.null(fill)){
    polygon(c(coords[,1]), c(coords[,2]), col = fill, border = NULL)
  }
}

make_square = function(bottom_left = c(0,0), side = 1, col = "darkblue", fill = NULL){
  lines(c(bottom_left, bottom_left), c(bottom_left + side, bottom_left), col = col)
  lines(c(bottom_left + side, bottom_left), c(bottom_left + side, bottom_left + side), col = col)
  lines(c(bottom_left + side, bottom_left + side), c(bottom_left, bottom_left + side), col = col)
  lines(c(bottom_left, bottom_left + side), c(bottom_left, bottom_left), col = col)
  if (!is.null(fill)){
    polygon(c(bottom_left, bottom_left+side, bottom_left+side, bottom_left), c(bottom_left, bottom_left, bottom_left+side, bottom_left+side), border = NULL, col = fill)
  }
}

inside_region <- function(x, ind = NULL) {
  if (is.null(ind)) {
    stop("Index should be supplied to calculate the are border.")
  }
  
  if (ind == 1) {
    I <- x[1]^2 + x[2]^2 > .5^2
  } else if (ind == 2) {
    I <- (x[1] - .5)^2 + (x[2] - .5)^2 < .5^2
  } else if (ind == 3) {
    I <- x[2] > x[1] - .5
  }
  
  return(I)
}

inside_shape = function(x){
  if (inside_region(x, 1) && inside_region(x, 2) && inside_region(x, 3)) {
    return(1)
  } else {
    return(0)
  }
}

find_area = function(B = 5000, seed = 10, make_plot = TRUE){
  # Control seed
  set.seed(seed)
  
  # Simulate B points
  point = matrix(runif(2*B, 0, 1), B, 2)
  
  # Compute the number of points inside unit circle
  nb_inside = apply(point, 1, inside_shape)
  area_hat = sum(nb_inside)/B
  
  # Make plot
  if (make_plot){
    plot(NA, xlim = c(-0.1,1.1), ylim = c(-0.1,1.1), xlab = "x", ylab = "y")
    make_square()
    cols = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.2)[1:2]
    grid()
    for (i in 1:B){
      points(point[i,1], point[i,2], pch = 16, col = cols[1 + nb_inside[i]])
    }
    make_circle()
  }
  
  # return estimated value of pi
  return(area_hat)
}


B = seq(from = 10^3, to = 10^5, by = 500)
val <- numeric(length(B))
for (k in 1 : length(B)) {
  val[k] <- find_area(B[k], make_plot = FALSE)
}
```

## Problem 2: Satellite Navigation System

```{toml}
is_on_earth = function(x0, y0){
  sqrt(x0^2 + y0^2) < 200
}

get_distance = function(x0, y0, epsilon){
  x = c(-300, 300, 0)
  y = c( 300, 300, -300)
  d = sqrt((x0 - x)^2 + (y0 - y)^2) + epsilon
  return(d)
}

obj_gnss = function(theta, distance){
  x = c(-300, 300, 0)
  y = c( 300, 300, -300)
  x0 = theta[1]
  y0 = theta[2]
  epsilon = theta[3]
  sum(((x0 - x)^2 + (y0 - y)^2 - (distance - epsilon)^2)^2)
}

get_position = function(distance, start = rep(0, 3)){
  if (is.matrix(distance)){
    nb_points = dim(distance)[1]
    results = matrix(NA, nb_points, 3)
    for (i in 1:nb_points){
      results[i,] = optim(start, obj_gnss, distance = distance[i,])$par[1:3]
    }
    class(results) = "gnssmat"
  }else{
    results = optim(start, obj_gnss, distance = distance)
    results[[6]] = distance
    names(results) = c(names(results)[1:5], "distance")
    class(results) = "gnssvect"
  }
  results
}

plot.gnssvect = function(position, show.distance = FALSE, add = FALSE){
  cols = hcl(h = seq(15, 375, length = 4), l = 65, c = 100)[1:3]
  
  if (add == FALSE){
    cols_trans = hcl(h = seq(15, 375, length = 4), l = 65, c = 100, alpha = 0.75)[1:3]
    plot(NA, xlim = c(-310, 310), ylim = c(-310, 310), xlab = "x", ylab = "y")
    grid()
    make_circle(fill = "lightgrey", radius = 200)
    make_circle(radius = 20, center = c(-300, 300), col = "red", fill = cols[1])
    make_circle(radius = 20, center = c(300, 300), col = "red", fill = cols[2])
    make_circle(radius = 20, center = c(0, -300), col = "red", fill = cols[3])
  
    if (show.distance == TRUE){
      make_circle(radius = position$distance[1], center = c(-300, 300), col = cols_trans[1])
      make_circle(radius = position$distance[2], center = c(300, 300), col = cols_trans[2])
      make_circle(radius = position$distance[3], center = c(0, -300), col = cols_trans[3])
    }
  }
  points(position$par[1], position$par[2], pch = "x", cex = 1.3, col = "orange2")
}


plot.gnssmat = function(position){
  cols = hcl(h = seq(15, 375, length = 4), l = 65, c = 100)[1:3]
  cols_trans = hcl(h = seq(15, 375, length = 4), l = 65, c = 100, alpha = 0.75)[1:3]
  plot(NA, xlim = c(-310, 310), ylim = c(-310, 310), xlab = "x", ylab = "y")
  grid()
  make_circle(fill = "lightgrey", radius = 200)
  make_circle(radius = 20, center = c(-300, 300), col = "red", fill = cols[1])
  make_circle(radius = 20, center = c(300, 300), col = "red", fill = cols[2])
  make_circle(radius = 20, center = c(0, -300), col = "red", fill = cols[3])
  
  for (i in 1:dim(position)[1]){
    points(position[i,1], position[i,2], pch = "x", cex = 1.3, col = "orange2")
  }
}

summary.gnssvect = function(position){
  cat("The estimated position is:\n")
  cat("X = ")
  cat(round(position$par[1],4))
  cat("\n")
  cat("Y = ")
  cat(round(position$par[2],4))
  cat("\n\n")
}
```

## Problem 3


```{toml }
library(titanic)
library(tidyverse)

data <- titanic_train %>% as_tibble() %>% 
  select(Survived, Pclass, Sex, SibSp, Parch, Fare) %>% 
  mutate(Sex = factor(Sex))

set.seed(1)
ind_train <- sample(1:nrow(data), size = .7*nrow(data), replace = FALSE)

data_train <- data[ind_train, ]
data_test <- data[-ind_train, ]

model_glm <- glm(Survived ~ ., data = data_train, family = binomial(link = "logit"))

sigma_f <- function(x) {
  1/pi * atan(x) + .5 
}

nll <- function(w, X, y) {
  xw <- X %*% w
  loglik <- y * log(sigma_f(xw) / (1 - sigma_f(xw))) + log(1 - sigma_f(xw))
  return(-sum(loglik))
}

X_data <- model.matrix(model_glm)
Y_data <- model_glm$y

model_cauchy <- optim(par = rep(0, 6), fn = nll, X = X_data, y = Y_data, method = "BFGS")

pred_glm <- predict(model_glm, newdata = data_test, type = "response") > .5

data_test_mat <- data_test %>% mutate(Sex = Sex == "male") %>% as.matrix()
pred_cauchy <- sigma_f(data_test_mat %*% model_cauchy$par) > .5

table(data_test$Survived, pred_glm)
table(data_test$Survived, pred_cauchy)
```

## Problem 4

**(a)**

```{toml }
# predictor variables
X <- matrix(c(
  0,0,1,
  0,1,1,
  1,0,1,
  1,1,1
),
  ncol = 3,
  byrow = TRUE
)

# observed outcomes
y <- c(0, 1, 1, 0)

# print the data so we can take a quick look at it
cbind(X, y)
``` 

**(b)**

```{toml}
# generate a first series of weights
rand_vector <- runif(ncol(X)*nrow(X))
rand_matrix <- matrix(rand_vector, nrow=ncol(X), ncol=nrow(X), byrow=TRUE)

# state of the neural net as trained
neural_net <- list(input=X, weights1= rand_matrix, weights2=matrix(runif(4), ncol=1), y=y, output=matrix(rep(0, times=4), ncol=1))

```

**\(c)**

```{toml}
# activation function 
sigmoid <- function(x){
  1.0/(1.0+exp(-x))
}

# derivative of activation function
sigmoid_derivative <- function(x){
  x*(1.0-x)
}
```

**(d)**

```{toml}
# loss function 
loss_function <- function(nn){
  sum((nn$y-nn$output)^2)
}
```

**(e)**

```{toml}
# feedforward
feedforward <- function(nn) {
  nn$layer1 <- sigmoid(nn$input %*% nn$weights1)
  nn$output <- sigmoid(nn$layer1 %*% nn$weights2)

  nn
}
```

**(f)**

```{toml}
# back propagation 
# this step uses a gradient descent approach to updating the weights
backprop <- function(nn){
  d_weights2 <- (t(nn$layer1) %*% (2*(nn$y-nn$output)*sigmoid_derivative(nn$output)))
  d_weights1 <- (2*(nn$y-nn$output)*sigmoid_derivative(nn$output)) %*% t(nn$weights2)
  d_weights1 <- d_weights1 * sigmoid_derivative(nn$layer1)
  d_weights1 <- t(nn$input) %*% d_weights1
  
  # update of the weights with Gradient Descent
  nn$weights1 <- nn$weights1 + d_weights1
  nn$weights2 <- nn$weights2 + d_weights2
  
  nn
}
```

**(g)**

```{toml}
# number of times to perform feedforward and backpropagation
n <- 1500

# data frame to store the results of the loss function.
# this data frame is used to produce the plot in the 
# next code chunk
loss_df <- data.frame(
  iteration = 1:n,
  loss = vector("numeric", length = n)
)

for (i in seq_len(1500)) {
  neural_net <- feedforward(neural_net)
  neural_net <- backprop(neural_net)

  # store the result of the loss function.  We will plot this later
  loss_df$loss[i] <- loss_function(neural_net)
}

# print the predicted outcome next to the actual outcome
data.frame(
  "Predicted" = round(neural_net$output, 3),
  "Actual" = y
)

```
