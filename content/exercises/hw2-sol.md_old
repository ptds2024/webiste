+++
title = "homework #2 solutions"
date =  2021-11-12
weight = 21
+++

#### Problem 1: "Are you a power?" solution

Below is a possible solution for "Are you a power?". The `%in%` returns `TRUE` if the element belongs to the set, or `FALSE` otherwise.

```{toml}
numbers <- character(100)

squares <- (1:10)^2
cubes <- (1:4)^3

for (k in 1 : length(numbers)) {
  if (k %in% squares && k %in% cubes) {
    numbers[k] <- paste0(which(squares == k), "^2, ", which(cubes == k), "^3")
  } else if (k %in% squares) {
    numbers[k] <- paste0(which(squares == k), "^2")
  } else if (k %in% cubes) {
    numbers[k] <- paste0(which(cubes == k), "^3")
  } else {
    numbers[k] <- k
  }
}
numbers 
```

#### Problem 2: Map solution 
-**(a)** To do so, simply use `addTiles` and `leaflet` in the following way: 

```{toml}
map <- leaflet() %>% addTiles()
map
```

Here, `%>%` is the [pipe operator](https://www.datacamp.com/community/tutorials/pipe-r-tutorial).

-**(b)** For a mere example of how to include multiple coordinates and names of the places, we construct a `data.frame` with fields `University of Lausanne` and `EPFL`, and find their coordinates.

```{toml}
uni <- data.frame(
  name = c("University of Lausanne", "EPFL"),
  lng = c(6.581188, 6.5668),
  lat = c(46.522451, 46.5191)
)
```

Adding the `addMarkers` option leads to the solution: 

```{toml}
map %>% addMarkers(lng = uni$lng, lat = uni$lat, popup = uni$name)
```

-**(c)** First, one needs to create the map from the `maps` package. Then, one should use it as a data argument in the `leaflet` function and colour accordingly. 

```{toml}
map_italy <- map("italy", plot = FALSE)
map_italy <- map_italy %>%
  leaflet() %>%
  addTiles() %>%
  addPolygons(fillColor = topo.colors(10, alpha = 1), stroke = FALSE)
map_italy
```

-**(d)** One obtains the solution by first loading the data, restricting the scope of the dataset to events with magnitude larger than 4.0 and by finally adding the marker points using the `addPolygons`. 

```{toml}
library(ETAS)
quakes <- italy.quakes
quakes_4 <- quakes[quakes$mag > 4, ]

map_italy %>%
  addMarkers(
    lng = quakes_4$long,
    lat = quakes_4$lat,
    popup = as.character(quakes_4$mag)
  )
```

-**(e)** To solve this problem, we filter the earthquakes that have the magnitude of 5.0 or more and store it in `quakes_5more`, add circles around each earthquake in the data set using `addCircles` with `radius` $= 10^\text{magnitude} / 10$, add markers for the `quakes_5more` earthquakes, and finally add the layer control.

```{toml}
quakes_5more <- quakes[quakes$mag >= 5, ]

map_italy %>%
  addCircles(
    lng = quakes$long,
    lat = quakes$lat,
    radius = 10^quakes$mag/10,
    stroke = FALSE,
    group = "Earthquakes"
  ) %>%
  addMarkers(
    lng = quakes_5more$long,
    lat = quakes_5more$lat,
    popup = as.character(quakes_5more$mag),
    group = "Above 5.0 marker"
  ) %>%
  addLayersControl(
    overlayGroups = c("Earthquakes", "Above 5.0 marker"),
    options = layersControlOptions(collapsed = FALSE)
  )
```

<img src="/homeworks/hw2_Pr2_map.png" alt="map_of_Italy" width="600px"/> 

#### Problem 3: Stock price and European call option

- **(a)** First we initialise all the given parameters:

```{toml}
S_0 <- 1
r = .05
sigma <- .2
Time <- 1
K <- 1
tau <- 0.001
N <- 500
```

Then we calculate the number of temporal steps at which we shall calculate the values of $S(t)$. 

```{toml}
Nt <- ceiling(Time / tau) + 1
t <- seq(0, (Nt - 1)*tau, by = tau)
```

Note that for the given $\tau = 0.001$ the final temporal step $t = (N_t - 1) \cdot \tau = 1$. If $\tau$ was not "so nice", the algorithm above would also include the first point that exceeds $t = 1$.

The results of simulations will be stored in a matrix

```{toml}
S_sim <- matrix(nrow = N, ncol = Nt)
```

Finally, start the simulations. For the code reproducibility, use `set.seed()`.

```{toml}
set.seed(123)
for (n in 1 : N) {
  dW = rnorm(Nt - 1, 0, sqrt(tau))
  S <- numeric(Nt)
  S[1] <- S_0
  for (k in 2 : Nt) {
    # browser()
    S[k] = S[k-1] + r*S[k-1]*tau + sigma*S[k-1]*dW[k-1]
  }
  S_sim[n, ] <- S
}
```

- **(b)** We simply extract the last column of `S_sim[, Nt]`, which contains all $N$ simulated values of $S(1)$, and use it to calculate the European call options $Y_n$:

```{toml}
Y_n <- exp(-r) * pmax(0, S_sim[, Nt] - K)
Y_bar <-  mean(Y_n)
Y_bar
```

- **(c)**, **(d)** and **(e)** We find the indexes where `Y_n` is taking its maximal and minimal values. There are multiple instances when `Y_n` is equal to $0$. Therefore, we take a random index that correspond to the zeroth `Y_n`. To find the value `Y_mean_ind` that is the closest to the mean `Y_bar`, we take the the index of a `Y_n`, which is the closest to the average value `Y_bar`. The remainder of the solution is as follows:

```{toml}
Y_min_ind <- which(Y_n == min(Y_n))
Y_max_ind <- which(Y_n == max(Y_n))
if (length(Y_min_ind) > 1) {
  Y_min_ind <- sample(Y_min_ind, 1)
}
Y_mean_ind <- which.min(abs(Y_n - Y_bar))

plot(
  t, S_sim[Y_max_ind, ],
  type = "l", col = "green",
  ylim = c(.5, 2), ylab = "S",
  main = "Simulated paths of S"
)
lines(t, S_sim[Y_min_ind, ], col = "red")
lines(t, S_sim[Y_mean_ind, ], col = "black")
legend(
  x = 0, y = 2,
  legend = c("Max Y", "Min Y", "Avg Y"),
  col = c("green", "red", "black"),
  lty = 1, cex = 1
)
```

<img src = "/homeworks/hw2_Pr3_plot.png" alt = "S_paths" width="600px"/> 

#### Problem 4: portfolio construction solution 
In this solution, we make use of matrices to represent the omega, variance, and mean of the investment. Using indexing, we can compute omega star and place it into the matrix of omega. After computing the matrices, we remove the NA values that were not used in the computation. We then compute the minimum profile using the condition the client gave us. 

```{toml}
library(quantmod)
library(rvest)
sp500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")

sp500 %>%
  html_nodes(".text") %>%
  html_text() -> ticker_sp500

SP500_symbol <- ticker_sp500[(1:499)*2+1]
SP500_symbol[SP500_symbol == "BRK.B"] <- "BRK-B"
SP500_symbol[SP500_symbol == "BF.B"] <- "BF-B"


today <- Sys.Date()
three_year_ago <- seq(today, length = 2, by = "-3 year")[2]
getSymbols(SP500_symbol, from = three_year_ago, to = today)

nb_sym <- length(SP500_symbol)

omega_invest <- var_invest <- mean_invest <- matrix(NA, nb_sym, nb_sym)
dimnames(omega_invest) <- dimnames(var_invest) <- dimnames(mean_invest) <- list(SP500_symbol, SP500_symbol)

for (i in 1:(nb_sym-1)){
  for (j in (i+1):nb_sym){
    stock1 <- get(SP500_symbol[i])
    stock2 <- get(SP500_symbol[j])

    Ra <- na.omit(ClCl(stock1))
    Rn <- na.omit(ClCl(stock2))

    # Estimation of mu and Sigma
    Sigma <- cov(cbind(Ra, Rn))
    mu <- c(mean(Ra), mean(Rn))

    # Compute omega^*
    omega_invest[i, j] <- omega_star <- (Sigma[2, 2] - Sigma[1, 2])/(Sigma[1, 1] + Sigma[2, 2] - 2*Sigma[1, 2])

    # Compute investment expected value and variance
    mean_invest[i, j] <- omega_star*mu[1] + (1 - omega_star)*mu[2]
    var_invest[i, j] <- omega_star^2*Sigma[1,1] + (1 - omega_star)^2*Sigma[2,2] +
      2*omega_star*(1 - omega_star)*Sigma[1,2]
  }
}

var_graph <- sqrt(na.omit(as.vector(var_invest)))
exp_graph <- na.omit(as.vector(mean_invest))
omega_graph <- na.omit(as.vector(omega_invest))
cond <- omega_graph < 0.6 & omega_graph > 0.4
risk_possible = var_graph[cond]
exp_possible = exp_graph[cond]
# minimum risk
min_risk = which.min(risk_possible)

col_possible = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.1)[2]
col_possible_leg = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.4)[2]
col_best = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 1)[1]

plot(NA, xlim = range(risk_possible),
     ylim = range(exp_possible),
     xlab = "Investement Daily Risk",
     ylab = "Investement Daily Expected Returns")
grid()
points(risk_possible, exp_possible, pch = 16, col = col_possible[1])
points(risk_possible[min_risk], exp_possible[min_risk], pch = 16, col = col_best[1])

legend("topright", c("Possible portfolio","Min-variance portfolio"),
       pch = 16, col = c(col_possible_leg[1], col_best[1]),
       bty = "n")

min_risk = which.min(risk_possible)
min_var = risk_possible[min_risk]
min_return = exp_possible[min_risk]
row_col = which(sqrt(var_invest)==min_var, arr.ind=TRUE)
stock1 = row.names(var_invest)[row_col[1]] # MRK
stock2 = row.names(var_invest)[row_col[2]] # WMT
amount1 = omega_invest[row_col[1], row_col[2]] # 0.4460958
amount2 = 1 - amount1 # 0.5539042
```


In case some of you were wondering, here is the "best" portfolio obtained for the last question of homework 2:
 
- `r stock1` (`r amount1*100` %) and `r stock2` (`r amount2*100`%)
- Mean return of `r min_return` 
- Risk of `r min_var` 
