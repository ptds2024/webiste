+++
title = "homework #4 solutions"
date =  2021-12-02
weight = 31
+++

As the Homework was written as a guided tutorial to creating a package and a Shiny app, we will simply post here the final code that corresponds to the detailed steps in the Homework questions. 

For the `area.R` file: 

```{toml}
make_circle = function(col = "darkblue", fill = NULL, lty = 1) {
  phi <- seq(from = pi/2, to = 0, length.out = 201)
  f1_points <- cbind(.5 * cos(phi), .5 * sin(phi))
  
  phi <- seq(from = 0, to = pi, length.out = 101)
  f2_points <- cbind(.5 + .5 * cos(phi), .5 + .5 * sin(phi))
  
  x <- seq(from = .5, to = 1, length.out = 101)
  f3_points <- cbind(x, x - .5)
  
  coords = rbind(f2_points, f1_points, f3_points)
  
  lines(coords, col = col, lty = lty)
  if (!is.null(fill)){
    polygon(c(coords[,1]), c(coords[,2]), col = fill, border = NULL)
  }
}

make_square = function(bottom_left = c(0,0), side = 1, col = "darkblue", fill = NULL){
  lines(c(bottom_left, bottom_left), c(bottom_left + side, bottom_left), col = col)
  lines(c(bottom_left + side, bottom_left), c(bottom_left + side, bottom_left + side), col = col)
  lines(c(bottom_left + side, bottom_left + side), c(bottom_left, bottom_left + side), col = col)
  lines(c(bottom_left, bottom_left + side), c(bottom_left, bottom_left), col = col)
  if (!is.null(fill)){
    polygon(c(bottom_left, bottom_left+side, bottom_left+side, bottom_left), c(bottom_left, bottom_left, bottom_left+side, bottom_left+side), border = NULL, col = fill)
  }
}

inside_region <- function(x, ind = NULL) {
  if (is.null(ind)) {
    stop("Index should be supplied to calculate the are border.")
  }
  
  if (ind == 1) {
    I <- x[1]^2 + x[2]^2 > .5^2
  } else if (ind == 2) {
    I <- (x[1] - .5)^2 + (x[2] - .5)^2 < .5^2
  } else if (ind == 3) {
    I <- x[2] > x[1] - .5
  }
  
  return(I)
}

inside_shape = function(x){
  if (inside_region(x, 1) && inside_region(x, 2) && inside_region(x, 3)) {
    return(1)
  } else {
    return(0)
  }
}

#' @title Estimation of the area of the shape
#' @description Provide an estimation of the area value using simple probabilities
#' @param \code{B} the number of points on which the estimation of pi is produced.
#' @param \code{seed} the seed to be used for the random generation used in the procedure
#' @return A \code{list} of the `area` class made of the estimated value of the area and the points on which this estimation is based. In particular:
#' \describe{
#'     \item{estimated_area}{The estimated value of the area}
#'     \item{points}{A data frame with the points in the unit square on which the estimation is based and a dummy indicating whether the particular point is inside the shape or not.}
#' }
#' @importFrom stats runif
#' @export
#' @examples
#' find_area(B=5000, seed=10)
find_area = function(B = 5000, seed = 10) {
  # Control of the arguments
  if(B%%1 != 0 | B <= 0){
    stop("Argument B is invalid. Please specify a positive integer for this parameter.")
  }

  if(seed%%1 != 0 | seed <= 0){
    stop("seed argument is invalid. Please specify a positive integer for this parameter.")
  }


  # Control seed
  set.seed(seed)

  # Simulate B points
  points = data.frame(
    x = runif(n = B, min = 0, max = 1),
    y = runif(n = B, min = 0, max = 1),
    inside = rep(NA, B)
  )
  
  # Compute the number of points inside unit circle
  for(i in 1:B){
    points$inside[i] <- ifelse(inside_shape(cbind(points$x[i], points$y[i])) == TRUE, 1, 0)
  }
  area_hat = sum(points$inside)/B

  # create a new list
  rval <- structure(
          list(
            estimated_area = area_hat,
            points = points),
          class = "area"
      )

  # return rval
  return(rval)
}

#' @title Plotting of the points serving in the estimation of the area
#'
#' @description Plotting procedure for an object of the `area` class.
#' @param x an object of `area` class containing the points that serve to the estimation of the area value.
#' @return A plot of the unit square and the shape emphasising the points used in the estimation.
#' @importFrom stats runif
#' @importFrom graphics grid lines polygon
#' @importFrom grDevices hcl
#' @export
#' @examples plot(x)
plot.area <- function(x){
  #Control of the argument
  if(class(x) != "area"){
    stop("Specify an argument of the area class for this function. ")
  }

  points <- x[["points"]]
  B <- nrow(points)

  plot(NA, xlim = c(-.1, 1.1), ylim = c(-.1, 1.1), xlab = "x", ylab = "y")
  make_square()
  cols = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.2)[1:2]
  grid()
  for (i in 1:B){
    points(points[i,1], points[i,2], pch = 16, col = cols[1 + points[i, 3]])
  }
  make_circle()
}
```

For the `ui.R` file: 

```{toml}
library(shiny)

shinyUI(fluidPage(

    titlePanel("Area Estimation"),

    sidebarLayout(

        sidebarPanel(

            numericInput("seed", "Enter the desired seed:", min=1, max=10^6, value=1),

            sliderInput("B", "Enter the number of simulations", min=1, max=1000000, value=100)

        ),

        mainPanel(

            plotOutput("plot"),

            textOutput("time"),

            textOutput("area")
        )
    )
))

```

For the `server.R` file: 

```{toml}
library(shiny)
library(pkghw4gN) # REPLACE N BY YOUR GROUP NUMBER AND DELETE THIS COMMENT

shinyServer(function(input, output) {

simulate <- reactive({
    #simulate the area of S and measure the time here
    find_area(B = input$B, seed=input$seed)
})

   output$plot <- renderPlot({
       # plot shape
      plot(simulate())
   })

   output$time <- renderText({
      #extract the time of the execution
      options(digits.secs=6)
      start.time <- Sys.time()
      simulate()
      end.time <- Sys.time()
      time <- end.time-start.time
      paste("Execution time is:", time)
    })

   output$area <- renderText({
      # extract the estimated value
      pival <- simulate()$estimated_area
      paste("Estimated area is:", pival)
    })

})
```

For the `runDemo.R` file: 

```{toml}
#' @export
runDemo <- function() {
  # REPLACE N BY YOUR GROUP NUMBER AND DELETE THIS COMMENT
  appDir <- system.file("shiny-examples", "area", package = "pkghw4gN")
  if (appDir == "") {
    stop(
      "Could not find example directory. Try re-installing pkghw4gN.",
      call. = FALSE
    )
  }

  shiny::runApp(appDir, display.mode = "normal")

}

```

For the `DESCRIPTION` file: 

```{toml}
Package: pkghw4gN
Type: Package
Title: Estimate area of the shape
Version: 0.1.0
Author: Surname Name
Maintainer: Surname Name <XXXXXX@emailadress.com>
Description: Functions to numerically estimate the area of the shape.
License: GPL (>= 2)
Encoding: UTF-8
RoxygenNote: 7.1.1
Imports: shiny (>= 1.4.0)
```

The other files are automatically generated and updated when using the `devtools::document()` command. 

