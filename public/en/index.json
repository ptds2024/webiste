[
{
	"uri": "http://localhost:1313/en/tutorials/github/",
	"title": "Git(hub) setup",
	"tags": [],
	"description": "",
	"content": "Installing and setting up Git, GitHub, and a Git GUI In this section we will install a distributed version-control system Git, register a new user at GitHub and connect them together.\n1. Installing and setting up Git Download Git installer from git website by clicking on \u0026ldquo;Download for Windows\u0026rdquo; or \u0026ldquo;Download for macOS\u0026rdquo; button, automatically detected for your machine. Open the downloaded file and follow the proposed steps Configure your Git to let it know who you are. Do it by opening a command prompt or Terminal window on your computer and set \u0026ldquo;Your Name\u0026rdquo; and \u0026ldquo;your_email@unil.ch{.email}\u0026rdquo; git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your_email@unil.ch\u0026#34; Replace \u0026ldquo;Your Name\u0026rdquo; with your preferred name or the name you want to associate with your Git commits. Please also use your UNIL email address, so that we can exploit GitHub Student Developer Pack afterwards.\nCheck yourself: You can verify your Git configurations by running the following command:\ngit config --global --list It will display your configured username and email.\nNote: For Mac users, Git could be already preinstalled. However, Apple does not provide the latest version, that is why we have just installed the latest Git.\nNote: Sometimes RStudio has a wrong path to git command. To check it, go to Tools -\u0026gt; Global Options\u0026hellip; -\u0026gt; Git/SVN, check the box \u0026ldquo;Enable version control interface for RStudio projects\u0026rdquo;. Then, \u0026ldquo;Git executable\u0026rdquo; and which git/where git (for Mac/Windows users, respectively) should be the same. Otherwise, copy the path from Terminal to RStudio.\nTo check if it worked, type which git in Terminal and expect to see /usr/local/bin/git.\n2. Registering a GitHub account Visit https://github.com and fill in the fields. Please use the same email address and short username without special symbols like hyphen, periods, etc. Furthermore, use free plan.\nSet up a GitHub Student Developer Pack by visiting https://education.github.com/.\nNote: The next step can be avoided (more convenient) by installing GitHub Desktop.\nNext, go to your GitHub account settings by clicking on your profile picture in the top-right corner of the GitHub page and selecting \u0026ldquo;Settings,\u0026rdquo; or directly visit the following link while signed in: https://github.com/settings/profile. In the left sidebar, click on \u0026ldquo;SSH and GPG keys.\u0026rdquo; Follow the instructions provided by GitHub to set up an SSH key for secure communication between your computer and GitHub. This will allow you to authenticate without entering your password each time you interact with GitHub via Git. Once the SSH key is set up, you can start using Git on your computer as described previously. You will be able to interact with your GitHub repositories by cloning them, pushing changes, and pulling updates.\nNote: For more details, follow steps at https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent and https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account\n3. Installing and setting up a GitHub Desktop Using GitHub Desktop eliminates the need to manually set up SSH keys, as the application handles authentication using your GitHub account credentials. It provides a more visual and user-friendly experience for working with Git and GitHub repositories.\nHere\u0026rsquo;s how you can use GitHub Desktop instead of setting up an SSH key:\nVisit the GitHub Desktop website. Install it. Open GitHub Desktop and click on the \u0026ldquo;Sign in to GitHub.com\u0026rdquo; button and enter your GitHub credentials to sign in. To clone an existing GitHub repository, click on \u0026ldquo;File\u0026rdquo; in the top menu, then \u0026ldquo;Clone Repository.\u0026rdquo; Select the repository you want to clone from the list, choose the destination folder on your computer, and click on the \u0026ldquo;Clone\u0026rdquo; button.\nOnce the repository is cloned, you can make changes to your files by editing, adding, or deleting them within the repository folder on your computer.\nGitHub Desktop will detect the changes automatically. You can review the changes, provide a summary of the changes made, and click on the \u0026ldquo;Commit\u0026rdquo; button to create a commit with the changes. You will also have the option to sync the changes to your GitHub repository using the \u0026ldquo;Push\u0026rdquo; button.\nGitHub Desktop provides an intuitive interface to manage branches, create new branches, pull changes from remote repositories, and perform various Git operations without using the command line.\nYou can also consider GitKraken as an alternative to GitHub Desktop.\nReferences: Happy Git and GitHub for the useR Install Git R packages "
},
{
	"uri": "http://localhost:1313/en/tutorials/r_install/",
	"title": "R/RStudio setup",
	"tags": [],
	"description": "",
	"content": "Installing R and RStudio 1. Installing R Install the latest version of R (4.3.1 as of September 5, 2023). R itself is similar to an engine and chassis of a car, that is a bare minimum so that you can start driving. You need to follow steps below:\nVisit https://cran.r-project.org and click on \u0026ldquo;Download R for \u0026hellip;\u0026rdquo;, where \u0026hellip; corresponds to your operating system. Depending on the operating system: For Mac: download \u0026ldquo;R-4.3.1-arm64.pkg\u0026rdquo;, open this file, and install R; For Windows: click on \u0026ldquo;base\u0026rdquo;, \u0026ldquo;Download R-4.3.1 for Windows\u0026rdquo;, and download the .exe file. Open it, and install R. Note: If you are a Mac user and you see similar to the following warning messages during the startup\nDuring startup - Warning messages: 1: Setting LC_CTYPE failed, using \u0026#34;C\u0026#34; 2: Setting LC_COLLATE failed, using \u0026#34;C\u0026#34; 3: Setting LC_TIME failed, using \u0026#34;C\u0026#34; 4: Setting LC_MESSAGES failed, using \u0026#34;C\u0026#34; 5: Setting LC_PAPER failed, using \u0026#34;C\u0026#34; [R.app GUI 1.50 (6126) x86_64-apple-darwin9.8.0] WARNING: You\u0026#39;re using a non-UTF8 locale, therefore only ASCII characters will work. Please read R for Mac OS X FAQ (see Help) section 9 and adjust your system preferences accordingly. [History restored from /Users/nemo/.Rapp.history] you need to follow steps below:\nOpen Terminal Write or paste in: defaults write org.R-project.R force.LANG en_US.UTF-8 Close Terminal 2. Installing RStudio Caution: Install RStudio only once R has been installed and only in this order.\nRStudio is an integrated development environment for R. Following up our example of the car, RStudio is similar to additional parts, such as exterior, interior, air conditioner, etc. You can drive the vehicle without them, but life is much simpler and pleasant if they are present.\nWe will install the free version:\nVisit RStudio website. Click on the respective version of your operating system, this will start the downloading process. Open the file and install. Note: To improve the quality of the code, we will limit the length of lines to 80 symbols. To display the margin in RStudio sourse editor:\nOpen RStudio Go to Tools -\u0026gt; Global Options… -\u0026gt; Code -\u0026gt; Display Click on “Show margin” Set \u0026ldquo;Margin column\u0026rdquo; to 80 Check yourself: Open RStudio application. In the console you will see something as follows:\nR version 4.3.1 (2023-06-16 ucrt) -- \u0026#34;Beagle Scouts\u0026#34; Copyright (C) 2023 The R Foundation for Statistical Computing Platform: x86_64-w64-mingw32/x64 (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type \u0026#39;license()\u0026#39; or \u0026#39;licence()\u0026#39; for distribution details. R is a collaborative project with many contributors. Type \u0026#39;contributors()\u0026#39; for more information and \u0026#39;citation()\u0026#39; on how to cite R or R packages in publications. Type \u0026#39;demo()\u0026#39; for some demos, \u0026#39;help()\u0026#39; for on-line help, or \u0026#39;help.start()\u0026#39; for an HTML browser interface to help. Type \u0026#39;q()\u0026#39; to quit R. 3. Installing packages Note: Packages can be installed from both R and RStudio. The installed RStudio is not required.\nIn this course we will utilize a number of packages. If a package is published on CRAN, then the procedure of installing the package is straightforward:\nOpen RStudio In the console execute the following command: install.packages(\u0026quot;package_name\u0026quot;), where package_name is the name of the desired package (e.g., \u0026ldquo;ggplot2\u0026rdquo;). Several packages, however, would have only development version (or simply be not published on CRAN). Then, knowing the GitHub link to the repo, one could follow the steps below:\nInstall devtools package (if it has not yet been installed) as usual (as shown above). Type devtools::install_github(\u0026quot;username/repo\u0026quot;) and hit the Enter/return key to execute the command in the console, where username is the username of the owner of the repo, and repo is the name of the repo. For homeworks you will use the following packages from CRAN: \u0026quot;tidyverse\u0026quot;, \u0026quot;devtools\u0026quot;, \u0026quot;rmarkdown\u0026quot;, \u0026quot;knitr\u0026quot;, \u0026quot;shiny\u0026quot;, \u0026quot;roxygen2\u0026quot;.\nNote: Before installing the \u0026quot;devtools\u0026quot; package, you will most certainly need to install building tools. For Windows, you need to install RTools. For Mac, you need to install XCode. Check this link for more details.\nNote: Packages should be installed only once. No needs to install them every time when you want to use them (it is the same as installing Skype every time you want to call your parents). That is why it is better to do it in console, not in source editor.\nCheck yourself: To check if a package was installed successfully, use \u0026quot;name_of_package\u0026quot; %in% rownames(installed.packages()).\n"
},
{
	"uri": "http://localhost:1313/en/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "Syllabus Explore the nature of this course and understand its various prerequisites.\n"
},
{
	"uri": "http://localhost:1313/en/syllabus/general/",
	"title": "General information",
	"tags": [],
	"description": "",
	"content": "Location and Time Location: Anthropole/3032 Time: 9 - 12 (see the lectures schedule for more details) Course Websites Course website: https://ptds.samorso.ch/ Online textbook: http://r.smac-group.com/ Discussion Forum: on slack Course Staff Instructor Name: Samuel Orso Email: Samuel.Orso@unil.ch Office: Anthropole/3090.1 Office Hours: Appointment may be made upon request. find me on GitHub Teaching Assistant Name: Timofei Shashkov Email: timofei.shashkov@unil.ch Office: Extranef/134 Office Hours: Appointment may be made upon request. "
},
{
	"uri": "http://localhost:1313/en/tutorials/workflow/",
	"title": "Project-oriented workflow",
	"tags": [],
	"description": "",
	"content": " It’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety. Jenny Bryan Introduction In this tutorial we will learn key aspects of making a good research project:\nreproducible portable self-contained In data science context, reproducibility means that the whole analysis can be recreated (or repeated) from the fresh start and raw data and get exactly the same results. It means, for instance, that if the analysis involves generating random numbers, then one has to set a seed (an initial state of a random generator) to obtain the same random split each time. Ideally, everyone should also have an access to data and software to replicate your analysis (it is not always the case, since data can be private).\nPortability means that regardless the operating system or a computer, for minimal given prerequisites, the project should work. For instance, if the project uses a particular package that works only on Windows, then it is not portable. The project is also not considered as portable, if it utilizes a particular computer settings, such as absolute paths instead of relative to your project folder (e.g., when reading the data or saving plots to files). Normally, you should be able to run the code on your collaborator\u0026rsquo;s machine without changing any lines in scripts.\nWe call a project self-contained, when you have everything you need at hand (i.e., in the folder of your project) and your porject does not affect anything it did not create. The project should not use a function, which you created in the other project five years ago \u0026ndash; it is very likely that no one else has this function. Further, if you need, for instance, to save a processed data, then it should be saved separately, and not overwrite the raw data.\nWhy this is a big deal? First off, it gives more credibility to the research, because it can be verified and validated by a third party. Further, keeping the flow of analysis reproducible, portable and self-contained makes it easier to extend.\nThere are no clear boundaries between these three properties, they are very close in meaning, and often overlap. As a consequence, techniques and practice we consider further improve all of them, rather than focusing on a particular one.\nEven if it might look like a yet another git / RStudio tutorial, this is a list of my recommendations based on my own experience and various posts.\nProject folder structure The size of the project increases exponentially. A project started as a harmless code snippet can easily pile up into a huge snowball of over hundred files with unstructured folder tree. To avoid this, it is important do define the folder structure before stepping into analyses. Depending whether the project is a package or a case study, its skeleton differs significantly.\nThe folder structure of R packages is a subject to a regulation of community (CRAN and Bioconductor). It is well-defined and can be explored in R packages book, therefore, I skip it in this tutorial.\nIn contrast to R packages, there is no a single right folder structure for analysis projects. Below, I present a simple yet extensible folder structure for data analysis project, based on several references that cover this issue.\nname_of_project/ |- data | |- raw | |- processed |- figures |- reports |- results |- scripts | |- deprecated |- .gitignore |- name_of_project.Rproj |- README.md The parent folder that will contain all project\u0026rsquo;s subfolders should have the same name as your project. Pick a good one. Spending an extra 5 minutes will save you from regrets in the future. The name should be short, concise, written in lower-case, and not contain any special symbols. One can apply similar strategies as for naming packages.\nThe folder data typically contains two subfolders, namely, raw and processed. The content of raw directory is data files of any kind, such as .csv, SAS, Excel, text and database files, etc. The content of this folder is read only, so that no scripts should change the original files or create new ones. For this purpose the processed directory is used: all processed, cleaned, and tidied datasets are saved here. It is a good practice to save files in R format, rather than in .csv, since the former one is a more efficient way of storing data (both in terms of space and time of reading/writing). The preference is given to .rds files over .RData (see why in Content of R files section). Again, files should have representative names (merged_calls.rds vs dataset_1.rds). Note that it should be possible to regenerate those datasets from your scripts. In other words, if you remove all files from this folder, it must be possible to restore all of them by executing your scripts that use only the data from raw.\nThe folder figures is the place where you may store plots, diagrams and other figures. There is not much to say about it. Common extensions of such files are .eps, .png, .pdf, etc. Again, file names in the folder should be meaningful (the name img1.png does not represent anything).\nAll reports live in directory with the corresponding name reports. These reports can be of any formats, such as LaTeX, Markdown, R Markdown, Jupyter Notebooks, etc. Currently, more and more people prefer rich documents with text and executable code to LaTeX and friends.\nNot all output object of the analysis are data files. For example, you have calibrated and fitted your deep learning network to the data, which took about an hour. Of course, it would be painful to retrain the model each time you run the script, and you want to save this model. Then, it is reasonable to save it in results with .rmd extension.\nPerhaps the first by importance folder is scripts. There you keep all your R scripts and codes. That is the exact place to use prefix numbers, if files should be run in a particular order (see previous tutorial). If you have files in other scripted languages (e.g., Python), it better to locate them in this folder as well. There is also an important subfolder called depricated. Whenever you want to remove one or the other script, it is a good practice to move it to depricated at first iteration, and only then delete. The script you want to remove can contain functions or analysis used by other collaborators. Moving it firstly to depricated ensures that the file is not used by other collaborators.\nThere are three important files in the project folder: .gitignore, name_of_project.Rproj, and README.md. The file .gitignore lists files that won\u0026rsquo;t be added to Git system: LaTeX or C build artifacts, system files, very large files, or files generated for particular cases. Further, the name_of_project.Rproj contains options and meta-data of the project: encoding, the number of spaces used for indentation, whether or not to restore a workspace with launch, etc. The README.md briefly describes all high-level information about the project, like an abstract of a paper.\nThe proposed folder structure is far from being exhaustive. You might need to introduce other folders, such as paper (where .tex version of a paper lives), sources ( a place for your compiled code here, e.g. C++), references, presentations, NEWS.md, TODO.md, etc. At the same time, keeping an empty folders could be misleading, and it is better to remove them (unless you are planning to store anything in them in the future).\nSeveral R packages, namely ProjectTemplate, template, and template are dedicated to project structures. Also it is possible to construct a project tree by forking manuscriptPackage or sample-r-project repositories (repo for short). Using a package or forking a repo allow for automated structure generation, but at the same time introduce many redundant and unnecessary folders and files.\nFinally, some scientists believe that all R projects should be in a shape of a package. Indeed, one can store data in \\data, R scripts in \\R, documentation in \\man, and the paper \\vignette. The nice thing about it that anyone familiar with an R package structure can immediately grasp where each type of a file located. On the other hand, the structure of R packages is tailored to serve its purpose \u0026ndash; make a coherent tool for data scientists and not to produce a data product: there is no distinction between functions definitions and applications, no proper place for reports, and finally there are no place for other script languages that you can use (e.g, Bash, Python, etc.).\nContent of R files While there are no rules how to organize your R code, there are several dos and don\u0026rsquo;ts that most of the time are not tough explicitly. I cover them below:\nDo not use the function install.packages() inside your scripts. You are not suppose to (re)install packages each time when you run your files. By default it is normally assumed that all packages that are used by a script are already installed.\nIf there are many of them to install, it is better to create a file configure.R, that will install all packages:\npkgs \u0026lt;- c(\u0026#34;ggplot2\u0026#34;, \u0026#34;plyr\u0026#34;) install.packages(pkgs) The snippet above profits from the fact that install.packages() is a vectorized function. Anyway, most of the time, install.packages() is suppose to be called from the console, and not from the script.\nDo not use the function require(), unless it is a conscious choice. In contrast to library(), require() does not throw an error (only a warning) if the package is not installed.\nUse a character representation of the package name.\n# Good library(\u0026#34;ggplot2\u0026#34;) # Bad library(ggplot2) Load only those packages that are actually used in the script. Load packages at the beginning of the script.\nDo not use rm(list = ls()) that erase your global environment. First, it could delete accidentally the precious heavy long-time-to-build object. Second, it gives an illusion of the fresh start of R.\nDo not use setwd(\u0026quot;/Users/irudnyts/path/that/only/I/have\u0026quot;). It is very unlikely that someone except you will have the same path to the project. Instead, use a package here and relative paths. The package here automatically recognizes the path to the project, and starts from there:\n# Good library(\u0026#34;here\u0026#34;) cars \u0026lt;- read.csv(file = here(\u0026#34;data\u0026#34;, \u0026#34;raw\u0026#34;, \u0026#34;cars.csv\u0026#34;)) # Bad setwd(\u0026#34;/Users/irudnyts/path/that/only/I/have/data/raw\u0026#34;) cars \u0026lt;- read.csv(file = \u0026#34;cars.csv\u0026#34;) If your script involves random generation, then set a seed by set.seed() function to get the same random split each time:\n# Good set.seed(1991) x \u0026lt;- rnorm(100) # Bad x \u0026lt;- rnorm(100) Do not repeat yourself (DRY). In R context it means the following: if the code repeated more than to times, you had better wrap it into a function.\n# Better fix_missing \u0026lt;- function(x) { x[x == -99] \u0026lt;- NA x } df[] \u0026lt;- lapply(df, fix_missing) # Bad df$a[df$a == -99] \u0026lt;- NA df$b[df$b == -99] \u0026lt;- NA df$c[df$c == -99] \u0026lt;- NA df$d[df$d == -99] \u0026lt;- NA df$e[df$e == -99] \u0026lt;- NA df$f[df$g == -99] \u0026lt;- NA Separate function definitions from their applications.\nUse saveRDS() instead of save():\nsave() saves the objects and their names together in the same file; saveRDS() only saves the value of a single object (its name is dropped). load() loads the file saved by save(), and creates the objects with the saved names silently (if you happen to have objects in your current environment with the same names, these objects will be overridden); readRDS() only loads the value, and you have to assign the value to a variable. Yihui Xie Inizializing a new data analysis project Disclaimer: the procedure below can be done in different ways. This particular way is no better than the others, but from author opinion has the most logical flow.\nPrerequisites:\nInstalled and configured Git Installed R and RStudio Existing account in Github Steps:\nPick a good name (e.g., beer).\nIn RStudio create a project:\nNavigate to File -\u0026gt; New project\u0026hellip; Select New Directory Select New project (unless you are developing a package or a ShinyApp) Insert your picked name into Directory name Check Create a git repository This creates a folder with the name of the project, initialize a local git repo, generate an .Rproj file, and a .gitignore file.\nAdd a file structure as discussed in section, that is folder data (with raw and processed subfolders), figures, etc.\nCreate a README.md file.\nLaunch Terminal and navigate your working directory (of Terminal, not R) to your project folder by, for instance, cd /Users/irudnyts/Documents/projects/beer.\nRecord changes by git add --all and commit by git commit -m \u0026quot;Create a folder structure of the project.\u0026quot;. Traditionally the message of the first commit is simple \u0026quot;First commit.\u0026quot;, but I prefer to write something more conscious, like \u0026quot;Create a folder structure of the project.\u0026quot;.\nNow all you changes are recoreded locally.\nNote also that Git does not record empty folders.\nCreate a new repo in GitHub (the same procedure holds for Bitbucket and Gitlab):\nFill in Repository name with the same name as your project. Fill in Description with one line that briefly explains the intent of the project and ends with full stop. (Check Private for homeworks). Hit Create repository. Connect your local repo to your Github repo by\ngit remote add origin git@github.com:irudnyts/beer.git git push -u origin master Refresh the page at your browser to ensure that changes appear at Github repo (do not freak out if you do not see all folders you have created, Git does not record empty folders).\nWorking with an existing data analysis project Pull changes introduced by your collaborators by git pull.\nModify your files. If you want to delete a script, first off, move it to \\depricated, and then remove it from there during the next iteration.\nAdd changes by git add --all and commit by git commit -m \u0026quot;A concious commit message.\u0026quot;.\nPush changes by git push. Merge changes if needed.\nReferences R packages Project-oriented workflow save() vs saveRDS() Jupyter And R Markdown: Notebooks With R A sample R project structure sample-r-project repo Creating an analysis as a package and vignette Analyses as Packages Packages vs ProjectTemplate Organizing the project directory Designing projects Project Management With RStudio Folder Structure for Data Analysis Organizing files for data analysis A meaningful file structure for R projects Packaging data analytical work reproducibly using R (and friends) What\u0026rsquo;s in a Name? The Concepts and Language of Replication and Reproducibility Packaging Your Reproducible Analysis Tools for Reproducible Research Data Analysis and Visualization in R for Ecologists Stop the working directory insanity manuscriptPackage cboettig/template Pakillo/template A minimal Project Tree in R -ProjectTemplate Writing a paper with RStudio Reproducibility vs. Replicability: A Brief History of a Confused Terminology "
},
{
	"uri": "http://localhost:1313/en/syllabus/coursedescr/",
	"title": "Course description",
	"tags": [],
	"description": "",
	"content": "This class is intended to introduce to the students a wide range of programming tools using the R language. Tentative list of topics that will be discussed in this class are listed below:\nReproducible research: knitr and rmarkdown Version control: GitHub Introduction to programming: Data structures, logical operators, control structures and functions Visualizations: Exploratory data analysis with Base R and ggplot2 R packages: Construction of R-packages using devtools, roxygen2 and pkgdown Communication: webiste creation via blogdown, Web application via shiny Web scraping: Automatic extraction of data from websites using SelectorGadget, rvest and quantmod, regular expression High performance computing: R and C++ integration via Rcpp, parallel computing. We do not assume any prior IT background from our students; however, we do expect a strong desire to acquire valuable and hands-on programming skills.\n"
},
{
	"uri": "http://localhost:1313/en/lectures/",
	"title": "Lectures",
	"tags": [],
	"description": "",
	"content": "Lectures Every Thursday from 9:00 to 12:00.\nThe ideal schedule is given below. It is subject to modifications.\nClass-related discussion and questions will be on Slack. Do not forget to register here.\nThe lecture of the 31st of October was on Zoom. The record is on this link, passcode: 8a=3P!BE.\nWeek Date Topic Instructor 1 19 Sept No class (Thesis planning \u0026amp; Career planning workshops) 2 26 Sept Introduction, RMarkdown, Github, Project Samuel 3 3 Oct Data structures, Control structures, Function Samuel 4 10 Oct Exercise and Homework 1 Timofei 5 17 Oct Object-oriented programming, Webscraping, Shiny App Samuel 6 24 Oct Exercise and Homework 2 Timofei 7 31 Oct Functional programming, Package creation, Advanced shiny App, Samuel 8 7 Nov Exercise and Homework 3 Timofei 9 14 Nov Data science with R on Google Cloud Samuel 9 21 Nov Power BI, final class Samuel 11 28 Nov Group Project Timofei 12 5 Dec Group project Timofei 13 12 Dec Group project Timofei 14 19 Dec Project Presentations Samuel and Timofei "
},
{
	"uri": "http://localhost:1313/en/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": "Tutorials This section contains the tutorials on various topics, namely, coding style guide, basics of syntax, best practice, conventions, typical workflows, etc.\n"
},
{
	"uri": "http://localhost:1313/en/syllabus/grading/",
	"title": "Grading",
	"tags": [],
	"description": "",
	"content": "Learning outcomes will be assessed based on the performances within each of the following categories:\nType Points Semester project 30 Homeworks 30 There won\u0026rsquo;t be a final examination for this course. Instead, your progress towards achieving the learning outcomes will be continuously evaluated throughout the semester via homework assignments, the project, and your active participation.\nSemester project The final project offers a chance to integrate the knowledge acquired throughout the course and apply it to a real-world scenario. All projects are collaborative efforts conducted in groups. Specific details regarding the semester project will be discussed during class sessions, and students will be able to choose from various project formats (please refer to the project page for more information).\nThe grading for this project, worth 30 points, is based on the following criteria:\nOverall quality Interest and complexity of the subject Presentation Screencast Shiny app Provided documentation R package GitHub repository Website These aspects collectively determine the assessment of your project.\nIt\u0026rsquo;s crucial not to underestimate the workload associated with the project. Successful completion of this class necessitates effective planning and team management skills from the students.\nHomeworks Throughout the semester, there are four homework assignments, each drawing from the course content. Each of these assignments is valued at 10 points. Detailed information about the specific requirements for these homework assignments can be found on the homeworks page.\nLate submission is penalized by 1 point every 24 hours after the deadline.\n"
},
{
	"uri": "http://localhost:1313/en/lectures/y23-24/",
	"title": "2023-2024",
	"tags": [],
	"description": "",
	"content": "Lectures Every Thursday from 8:30 to 12:00.\nThe ideal schedule is given below. It is subject to modifications.\nClass-related discussion and questions will be on Slack. Do not forget to register here.\nWeek Date Topic Instructor 1 21 Sept No class (Thesis planning \u0026amp; Career planning workshops) 2 28 Sept Introduction, RMarkdown, Github, R/Rstudio installation Samuel 3 5 Oct Exercise and Homework 1, Project-oriented workflow Aleksandr 4 12 Oct Data structures, Control structures, Function Samuel 5 19 Oct Exercise and Homework 2, R coding style guide Aleksandr 6 26 Oct Object-oriented programming, Webscraping, Shiny App I Samuel 7 2 Nov Exercise and Homework 3 Aleksandr 8 9 Nov Functional programming, Shiny App I, Package creation Samuel 9 16 Nov Exercise and Homework 4 Aleksandr 10 23 Nov Package creation, Shiny App II, Project Samuel 11 30 Nov Group Project Aleksandr 12 7 Dec Website creation, Slide Samuel 13 14 Dec Group project Aleksandr 14 21 Dec Project Presentations Samuel and Aleksandr "
},
{
	"uri": "http://localhost:1313/en/exercises/",
	"title": "Exercises",
	"tags": [],
	"description": "",
	"content": "Exercises Train yourself with material seen during classes.\nExercises Exercise1.pdf (123 ko) Exercise1_solution.pdf (141 ko) Exercise2.pdf (55 ko) Exercise2_solution.pdf (185 ko) Exercise3.pdf (58 ko) Exercise3_solution.pdf (187 ko) Financial Sample.xlsx (81 ko) snipes.csv (0 ko) "
},
{
	"uri": "http://localhost:1313/en/syllabus/communication/",
	"title": "Communication",
	"tags": [],
	"description": "",
	"content": "Slack We will utilize Slack for discussing class-related matters and addressing inquiries. This platform is designed to facilitate collaborative learning, leveraging the combined wisdom of your peers and instructors. Please feel free to share questions with the entire class, especially if they pertain to course content. We strongly encourage you to seek clarification if you encounter difficulties grasping a concept and to offer assistance to your fellow classmates whenever possible by responding to their queries.\nEmail The preferred communication channel for most matters, whether public or private, is Slack.\n"
},
{
	"uri": "http://localhost:1313/en/lectures/y22-23/",
	"title": "2022-2023",
	"tags": [],
	"description": "",
	"content": "Lectures Every tuesday from 8:30 to 12:00.\nThe ideal schedule is given below.\nClass-related discussion and questions will be on Slack, do not forget to register here.\nWeek Date Topic Instructor 1 20 Sept Introduction, RMarkdown, Github, R/Rstudio installation Samuel 2 27 Sept Exercise and Homework 1, Project-oriented workflow Aleksandr 3 4 Oct Data structures, Control structures Samuel 4 11 Oct Exercise and Homework 2, R coding style guide Aleksandr 5 18 Oct Function I, project proposal, webscraping Samuel 6 25 Oct Exercise and Homework 3 Aleksandr 7 1 Nov Group project Aleksandr 8 8 Nov Function II, Shiny app I Samuel 9 15 Nov Exercise and Homework 4 Aleksandr 10 22 Nov R-pkg Samuel 11 29 Nov Group project Aleksandr 12 6 Dec Shiny app II, project Samuel 13 13 Dec Group project Aleksandr 14 20 Dec Project presentations Samuel and Aleksandr "
},
{
	"uri": "http://localhost:1313/en/syllabus/material/",
	"title": "Material",
	"tags": [],
	"description": "",
	"content": "Laptops Please consider bringing a laptop with you to class each week if you have one available. We encourage collaborative work among students, and ideally, we aim to have at least one laptop for every 2 to 3 students. Given that both homework assignments and the project involve team efforts, we recommend partnering with classmates who possess a laptop.\nIn the event that you intend to purchase a laptop, please keep in mind that students from Swiss Universities can benefit from preferential pricing through the Neptun Projekt or EPFL\u0026rsquo;s Poseidon.\nYou do not need to buy a laptop if you do not possess one.\nOS It is possible to follow this class using Mac OS, Windows and Linux. Yes, Linux. Why not Linux? See https://itsfoss.com/linux-better-than-windows/, https://www.profolus.com/topics/advantages-and-disadvantages-of-macos/ and http://jobsinthefuture.com/index.php/2018/03/02/best-operating-system-os-for-data-science/.\nTextbooks This class is based on the online textbook:\nRequired: An Introduction to Statistical Programming Methods with R This document is under development and it is therefore preferable to always access the text online to be sure you are using the most up-to-date version. Due to its current development, you may encounter errors ranging from broken code to typos or poorly explained topics. If you do, please let us know! Simply add an issue to the GitHub repository used for this document and we will make the changes as soon as possible. In addition, if you know RMarkdown and are familiar with GitHub, make a pull request and fix an issue yourself, otherwise, if you\u0026rsquo;re not familiar with these tools, they will be explained later on in the book itself.\nThe textbooks below are also recommended and are legally available online for free. The following texts will be heavily referenced:\nRecommended: Advanced R Programming by Hadley Wickham Recommended: R Packages Hadley Wickham by Hadley Wickham Recommended: An Introduction to R by W. N. Venables, D. M. Smith, and the R Core Team Recommended: blogdown: Creating Websites with R Markdown by Yihui Xie, Amber Thomas and Alison Presmanes Hill Recommended: Mastering Shiny by Hadley Wickham Recommended: Happy Git and GitHub for the useR by Jennifer Bryan The following textbooks are helpful, but not necessary to succeed in the course:\nSupplemental: R Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, Garrett Grolemund Supplemental: ggplot2: Elegant Graphics for Data Analysis (2nd Edition - GitHub Only) by Hadley Wickham Supplemental: R for Data Science by Garrett Grolemund and Hadley Wickham Supplemental: The R Inferno by Patrick Burns Supplemental: R Programming for Data Science by Roger D. Peng Supplemental: Seamless R and C++ integration with Rcpp by Dirk Eddelbuettel Supplemental: Engineering Production-Grade Shiny Apps by Colin Fay, Sébastien Rochette, Vincent Guyader, Cervan Girard We regrouped more references by category in the resources page.\nSoftware All the software we will be using are free for acamedic activities. The course will use and present the R statistical computing language as well as different parts of C++ through Rcpp. The integrated developer environment that we will use to explore R is RStudio IDE made by RStudio Inc. See https://blog.rstudio.com/2020/08/17/r-and-rstudio-the-interoperability-environment-for-data-analytics for why it would be interesting as data scientist to use R/RStudio.\n"
},
{
	"uri": "http://localhost:1313/en/lectures/y21-22/",
	"title": "2021-2022",
	"tags": [],
	"description": "",
	"content": "Lectures from 2021-2022 Lectures fully online via Zoom are indicated with a º symbol.\nWeek Date Time Topic Instructor Videos Slides 1 27 Sept 9:00 - 10:00 Introduction, RMarkdown Samuel Orso RMarkdown, Zoom meeting Introduction, RMarkdown 1 27 Sept 10:15 - 12:00 R/RStudio installation, Homework #0, R coding style guide Aleksandr Shemendyuk 2º 4 Oct 9:00 - 10:00 GitHub, Data structures Samuel Orso GitHub, Data structures Git/GitHub, Data Structure 2 4 Oct 10:15 - 12:00 Project-oriented workflow, Homework #1 Aleksandr Shemendyuk 3º 11 Oct 9:00 - 10:00 Control structures Samuel Orso Control structures Control Structure 3 11 Oct 10:15 - 12:00 Homework #2 Aleksandr Shemendyuk 4 18 Oct 9:00 - 10:00 Functions, Group projects Samuel Orso Functions Function, Proposal 4 18 Oct 10:15 - 12:00 Homework #2 Aleksandr Shemendyuk 5º 25 Oct 9:00 - 10:00 Functions Samuel Orso Functions Function 5 25 Oct 10:15 - 12:00 Homework #3, Logistic regression Aleksandr Shemendyuk 6 1 Nov 9:00 - 10:00 Shiny Web applications Samuel Orso Shiny Shiny 6 1 Nov 10:15 - 12:00 Project proposal coaching Samuel Orso 7º 8 Nov 9:00 - 10:00 R-packaging Samuel Orso Packages R pkg 7 8 Nov 10:15 - 12:00 Homework #3 Aleksandr Shemendyuk 8º 15 Nov 9:00 - 10:00 blogdown: websites and blogs creation Samuel Orso website 8 15 Nov 10:15 - 12:00 Homework #4 Aleksandr Shemendyuk 9º 22 Nov 9:00 - 10:00 Webscraping Samuel Orso Webscraping webscraping 9 22 Nov 10:15 - 12:00 Homework #4 Aleksandr Shemendyuk 10º 29 Nov 9:00 - 10:00 Samuel Orso Advanced shiny 10 29 Nov 10:15 - 12:00 Aleksandr Shemendyuk 11º 6 Dec Project coaching Samuel Orso 12 13 Dec Project coaching Aleksandr Shemendyuk 13 20 Dec Project presentations Samuel Orso "
},
{
	"uri": "http://localhost:1313/en/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": "Project Project represents 30 points, so 50% of the final grade.\nGroups are here. Different requirements are explained in these slides and the pdf below.\nRelated files project_summary.pdf (61 ko) "
},
{
	"uri": "http://localhost:1313/en/group/",
	"title": "Groups",
	"tags": [],
	"description": "",
	"content": "Discover with whom you\u0026rsquo;re going to work with\nBelow are the groups. The number for the group has no meaning. The order within the group has no meaning.\nGroup 1 Group 2 Group 3 Group 4 Group 5 Group 6 Group 7 Fanny Iff Léo Wenger Alicia Gamal Ronald Medvedev Salvatore D\u0026rsquo;Amato Nathanaël Dürst Lodrik Adam Ambre Ferrari Urs Huerni Streuli Marvin Julien Keller Reisa Reci Hassan El Kira Jeff Macaraeg Elwin Freudiger Hugo Troendel Mariel Gandarillas Calderon Antoine Magnin Lina Dernaika Luca Marini Julien Perini Arnaud Aquin-Demierre Anastasia Pushkarev Marcela Choque Quispe Robin Michel Andrea Danesi Steve Marcello Emma Antille Olivier Dinh Valeriia Bilousko Sofia Daza Arandia Faber Bickerstaffe Thomas Bonnet Yanis Bougherara Herald Nakpil Maria Fernanda Cladera Melgar "
},
{
	"uri": "http://localhost:1313/en/syllabus/final/",
	"title": "Convinced?",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "http://localhost:1313/en/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "Resources Getting started with R and Rstudio The CRAN website CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of R and its documentation.\nAn Introduction to R This official and up-to-date tutorial, gives an introduction to the language and how to use R for doing statistical analysis and graphics.\nRStudio RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management.\nRstudio cheat sheets A trove of cheat sheets below to make it easy to learn about and use some of R\u0026rsquo;s most useful packages.\nR packages for data science The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nOnline learning Coding club\u0026rsquo;s tutorials Our mission is to create a fun and supportive environment where we develop programming and statistics skills together, using R.\nWe want to replace statistics anxiety and code fear with inspiration and motivation to learn, and here we will share our experience.\nDatacamp\u0026rsquo;s free R tutorial and Try R by Code School Both sites provide interactive lessons that will get you writing real code in minutes. They are a great place to make mistakes and test out new skills. You are told immediately when you go wrong and given a chance to fix your code.\nWriting functions in R This course will teach you the fundamentals of writing functions in R so that, among other things, you can make your code more readable, avoid coding errors, and automate repetitive tasks.\nIntroduction to the tidyverse This is an introduction to the dplyr and ggplot2 packages through exploration and visualization of country data over time. This is a suitable course for people who have no or limited experience in R and are interested in learning to perform data analysis.\nData visualisation with ggplot2 Covers the basics of ggplot2. Followed by part 2 which covers more advanced topics.\nExploratory data analysis in R: a case study This course brings ggplot2 and dplyr into action in an in-depth analysis of United Nations voting data. The course also introduces broom for tidying model output and the tidyr package for wrangling data into an explorable shape.\nBooks Advanced R The book is designed primarily for R users who want to improve their programming skills and understanding of the language. It should also be useful for programmers coming to R from other languages, as it explains some of R’s quirks and shows how some parts that seem horrible do have a positive side. Hadley Wickham R for Data Science This book will teach you how to do data science with R: You\u0026rsquo;ll learn how to get your data into R, get it into the most useful structure, transform it, visualise it and model it. In this book, you will find a practicum of skills for data science. Garrett Grolemund and Hadley Wickham Misc Easy web applications in R Shiny is an open source R package that provides an elegant and powerful web framework for building web applications using R. Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.\nRcpp for Seamless R and C++ Integration The Rcpp package has become the most widely used language extension for R, the powerful environment and language for computing with data. As of May 2017, 1026 packages on CRAN and a further 91 on BioConductor deploy Rcpp to extend R, to accelerate computations and to connect to other C++ projects.\n"
},
{
	"uri": "http://localhost:1313/en/",
	"title": "Programming tools in data science",
	"tags": [],
	"description": "",
	"content": "Programming tools in data science Welcome to the website dedicated to Programming Tools in Data Science, a course offered at HEC Lausanne during the autumn semester of 2024-2025. The primary aim of this course is to provide an introduction to the R programming language for aspiring data scientists. The core focus of this course revolves around concepts related to data manipulation, data analysis, data visualization, reproducible research, version control, and sharing of results.\nBy the conclusion of this course, students will possess the ability to independently create their own R packages and Shiny apps. They will also gain proficiency in making their work accessible on GitHub, documenting their projects using literate programming techniques, and showcasing their efforts by creating a dedicated website.\nThe first class is on Thursday 26 September. The week before is dedicated to the Thesis Writing Workshop and Career Planning Workshop.\n"
},
{
	"uri": "http://localhost:1313/en/exercises/exercise1/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\u003c!DOCTYPE html\u003e Exercice 1 Exercice 1 Samuel Orso 2024-08-25 Lecture #2: R Markdown Basic manipulations: 1. Create a RMarkdown HTML document in RStudio and “knit” it. 1. Create a new header of type 2. 1. Make a linear regression with “Sepal Length” as a response and “Sepal Width” as an explanatory variable from the iris dataset and save the result. 1. Highlight the code with monochrome style. 1. Print the summary of the linear regression. 1. Include the QQplot from the linear regression. Change to filled dots. 1. Print the head of the iris dataset with kable. 1. Remove the . from the labels (click here).\nMore advanced manipulations: 1. Install kableExtra. And perform the examples shown in the slides with iris dataset. 1. Using Mathpix, reproduce equation (6.1) of the paper https://arxiv.org/abs/math/0303109 1. Add the Reference and cite it in the RMarkdown. 1. Recreate your RMarkdown into a Quarto document.\n"
},
{
	"uri": "http://localhost:1313/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]